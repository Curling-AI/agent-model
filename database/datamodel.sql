-- Tabela Organization
CREATE TABLE organizations (
  id SERIAL PRIMARY KEY,
  company_name VARCHAR(255) NOT NULL,
  cnpj VARCHAR(20) NOT NULL UNIQUE,
  cep VARCHAR(10) NOT NULL,
  address VARCHAR(255) NOT NULL,
  number INTEGER NOT NULL,
  city VARCHAR(100) NOT NULL,
  state VARCHAR(50) NOT NULL,
  website VARCHAR(255),
  segment VARCHAR(100),
  language VARCHAR(2) NOT NULL CHECK (language IN ('pt', 'en'))
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela User
CREATE TABLE "users" (
  id SERIAL PRIMARY KEY,
  organization_id INTEGER NOT NULL,
  name VARCHAR(255) NOT NULL,
  surname VARCHAR(255),
  email VARCHAR(255) NOT NULL,
  phone VARCHAR(50),
  job_id INTEGER REFERENCES jobs(id),
  location_name VARCHAR(255),
  language VARCHAR(50),
  timezone VARCHAR(50),
  permissions jsonb, 
  auth_id VARCHAR(255) UNIQUE,
  status VARCHAR(10) CHECK (status IN ('active', 'inactive', 'suspended')),
  department_id INTEGER REFERENCES departments(id),
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela CrmColumn
CREATE TABLE crm_columns (
  id SERIAL PRIMARY KEY,
  organization_id INTEGER NULL,
  name VARCHAR(255) NOT NULL,
  color VARCHAR(10) NOT NULL DEFAULT #000000,
  is_system BOOLEAN NOT NULL DEFAULT FALSE,
  order serial,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela ServiceProvider
CREATE TABLE service_providers (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description_pt VARCHAR(255),
  description_en VARCHAR(255),
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Enum para status de assinatura
CREATE TYPE public.subscription_status AS ENUM ('active', 'inactive', 'paused', 'expired');

-- Tabela Plan
CREATE TABLE plans (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  price_month NUMERIC NOT NULL,
  price_year NUMERIC NOT NULL,
  metadata JSONB DEFAULT '{}'::jsonb,
  active BOOLEAN NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela User Subscriptions
CREATE TABLE public.user_subscriptions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  plan_id INTEGER NOT NULL,
  provider_data JSONB NOT NULL DEFAULT '{}'::jsonb,
  updated_at TIMESTAMP WITH TIME ZONE NULL,
  status public.subscriptionstatus NOT NULL,
  user_id INTEGER NOT NULL,
  CONSTRAINT user_subscriptions_pkey PRIMARY KEY (id),
  CONSTRAINT user_subscriptions_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES plans (id),
  CONSTRAINT user_subscriptions_user_id_fkey FOREIGN KEY (user_id) REFERENCES users (id)
) TABLESPACE pg_default;

-- Tabela User Subscriptions Payments
CREATE TABLE public.user_subscriptions_payments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  provider_data JSONB NOT NULL DEFAULT '{}'::jsonb,
  updated_at TIMESTAMP WITH TIME ZONE NULL,
  user_subscription_id BIGINT NOT NULL,
  user_id INTEGER NOT NULL,
  plan_id INTEGER NOT NULL,
  amount NUMERIC NOT NULL DEFAULT '0'::numeric,
  currency TEXT NOT NULL,
  CONSTRAINT user_subscriptions_payments_pkey PRIMARY KEY (id),
  CONSTRAINT user_subscriptions_payments_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES plans (id),
  CONSTRAINT user_subscriptions_payments_user_id_fkey FOREIGN KEY (user_id) REFERENCES users (id),
  CONSTRAINT user_subscriptions_payments_user_subscription_id_fkey FOREIGN KEY (user_subscription_id) REFERENCES user_subscriptions (id)
) TABLESPACE pg_default;

-- Tabela PlanFeature (relaciona features do plano)
CREATE TABLE plan_features (
  id SERIAL PRIMARY KEY,
  plan_id INTEGER REFERENCES plans(id) ON DELETE CASCADE,
  feature VARCHAR(255) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela Agent
CREATE TABLE agents (
  id SERIAL PRIMARY KEY,
  organization_id INTEGER NOT NULL,
  name VARCHAR(255) NOT NULL,
  active BOOLEAN DEFAULT 1,
  description TEXT,
  greetings TEXT,
  tone VARCHAR(255),
  voice_configuration VARCHAR(255),
  response_time INTEGER CHECK (response_time IN (0, 1, 5, 15)),
  schedule_agent_begin VARCHAR(255),
  schedule_agent_end VARCHAR(255),
  type VARCHAR(20) CHECK (type IN ('simple', 'advanced')),
  prompt TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela Document
CREATE TABLE documents (
  id SERIAL PRIMARY KEY,
  agent_id INTEGER REFERENCES agents(id) ON DELETE CASCADE,
  type VARCHAR(20) CHECK (type IN ('file', 'faq', 'video', 'website')),
  name VARCHAR(255) NOT NULL,
  content jsonb,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela Integrations
CREATE TABLE integrations (
  id SERIAL PRIMARY KEY,
  agent_id INTEGER REFERENCES agents(id) ON DELETE CASCADE,
  service_provider_id INTEGER REFERENCES service_providers(id) ON DELETE CASCADE,
  metadata jsonb,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela FollowUpTrigger
CREATE TABLE follow_up_triggers (
  id SERIAL PRIMARY KEY,
  organization_id INTEGER NULL,
  name VARCHAR(255) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela FollowUp
CREATE TABLE follow_ups (
  id SERIAL PRIMARY KEY,
  agent_id INTEGER REFERENCES agents(id) ON DELETE CASCADE,
  organization_id INTEGER REFERENCES organizations(id) ON DELETE CASCADE,
  name VARCHAR(255) NOT NULL,
  crm_column_id INTEGER REFERENCES crm_columns(id),
  trigger_id INTEGER REFERENCES follow_up_triggers(id),
  description TEXT,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela FollowUpMessage
CREATE TABLE follow_up_messages (
  id SERIAL PRIMARY KEY,
  follow_up_id INTEGER REFERENCES follow_ups(id) ON DELETE CASCADE,
  message TEXT NOT NULL,
  delay_type VARCHAR(20) CHECK (delay_type IN ('immediate', 'custom')) NOT NULL DEFAULT 'immediate',
  days INTEGER NOT NULL DEFAULT 0,
  hours INTEGER NOT NULL DEFAULT 0,
  minutes INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela FollowUpMessageDocument
CREATE TABLE follow_up_message_documents (
  id SERIAL PRIMARY KEY,
  follow_up_message_id INTEGER REFERENCES follow_up_messages(id) ON DELETE CASCADE,
  name VARCHAR(255) NOT NULL,
  url VARCHAR(255) NOT NULL,
  type VARCHAR(20) CHECK (type IN ('document', 'video', 'audio')),
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela Conversation
CREATE TABLE conversations (
  id SERIAL PRIMARY KEY,
  organization_id INTEGER NOT NULL,
  agent_id INTEGER REFERENCES agents(id) ON DELETE SET NULL,
  lead_id INTEGER NOT NULL,
  mode VARCHAR(20) DEFAULT 'agent' CHECK (mode IN ('agent', 'human')),
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela ConversationMessage
CREATE TABLE conversation_messages (
  id SERIAL PRIMARY KEY,
  conversation_id INTEGER REFERENCES conversations(id) ON DELETE CASCADE,
  sender VARCHAR(10) CHECK (sender IN ('human', 'agent')),
  content TEXT NOT NULL,
  timestamp TIMESTAMP NOT NULL,
  metadata jsonb NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela ConversationTag
CREATE TABLE conversation_tags (
  id SERIAL PRIMARY KEY,
  organization_id INTEGER NULL,
  name VARCHAR(255) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Associação entre Conversation e ConversationTag
CREATE TABLE conversation_tag_associations (
  conversation_id INTEGER REFERENCES conversations(id) ON DELETE CASCADE,
  conversation_tag_id INTEGER REFERENCES conversation_tags(id) ON DELETE CASCADE,
  PRIMARY KEY (conversation_id, conversation_tag_id),
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela Lead
CREATE TABLE leads (
  id SERIAL PRIMARY KEY,
  organization_id INTEGER NOT NULL,
  name VARCHAR(255) NOT NULL,
  company VARCHAR(255),
  email VARCHAR(255),
  phone VARCHAR(50),
  value NUMERIC NOT NULL,
  source VARCHAR(20) CHECK (source IN ('whatsapp', 'email', 'website', 'phone', 'referral')),
  priority VARCHAR(10) CHECK (priority IN ('low', 'medium', 'high')),
  observation TEXT,
  tags jsonb,
  status INTEGER default 1,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela Job
CREATE TABLE jobs (
  id SERIAL PRIMARY KEY,
  organization_id INTEGER NULL,
  title VARCHAR(255) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela Department
CREATE TABLE departments (
  id SERIAL PRIMARY KEY,
  organization_id INTEGER NULL,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  manager_name VARCHAR(255),
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela Permission
CREATE TABLE permissions (
  id SERIAL PRIMARY KEY,
  organization_id INTEGER NULL,
  group_id INTEGER NOT NULL,
  group_name_pt VARCHAR(255) NOT NULL, 
  group_name_en VARCHAR(255) NOT NULL,
  code VARCHAR(255) NOT NULL,
  description_pt TEXT NOT NULL,
  description_en TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()  
);

-- This script sets up a PostgreSQL database schema for storing documents with embeddings
-- and provides a function to search for similar documents based on a query embedding.
-- Enable the pgvector extension to work with embedding vectors
create extension vector;

-- Create a table to store your documents
create table knowledge_openai (
  id bigserial primary key,
  agent_id bigint,
  document_id bigint,
  content text, -- corresponds to Document.pageContent
  metadata jsonb, -- corresponds to Document.metadata
  embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed
);

create table knowledge_gemini (
  id bigserial primary key,
  agent_id bigint,
  document_id bigint,
  content text, -- corresponds to Document.pageContent
  metadata jsonb, -- corresponds to Document.metadata
  embedding vector(768) -- 768 works for Gemini embeddings, change if needed
);

-- Create a function to search for documents
create function match_knowledge_openai (
  query_embedding vector(1536),
  match_count int default null,
  filter jsonb DEFAULT '{}'
) returns table (
  id bigint,
  content text,
  metadata jsonb,
  similarity float
)
language plpgsql
as $$
#variable_conflict use_column
begin
  return query
  select
    id,
    content,
    metadata,
    1 - (knowledge_openai.embedding <=> query_embedding) as similarity
  from knowledge_openai
  where metadata @> filter
  order by knowledge_openai.embedding <=> query_embedding
  limit match_count;
end;
$$;

create function match_knowledge_gemini (
  query_embedding vector(768),
  match_count int default null,
  filter jsonb DEFAULT '{}'
) returns table (
  id bigint,
  content text,
  metadata jsonb,
  similarity float
)
language plpgsql
as $$
#variable_conflict use_column
begin
  return query
  select
    id,
    content,
    metadata,
    1 - (knowledge_gemini.embedding <=> query_embedding) as similarity
  from knowledge_gemini
  where metadata @> filter
  order by knowledge_gemini.embedding <=> query_embedding
  limit match_count;
end;
$$;

-- Function: remove_knowledge_by_agent_id()
CREATE OR REPLACE FUNCTION remove_knowledge_by_agent_id()
RETURNS TRIGGER AS $$
BEGIN
  DELETE FROM knowledge_openai WHERE agent_id = OLD.agent_id and document_id = OLD.id;
  DELETE FROM knowledge_gemini WHERE agent_id = OLD.agent_id and document_id = OLD.id;
  RETURN OLD;
END;
$$ LANGUAGE plpgsql;

-- Function: remove_follow_up_messages_by_follow_up_id()
CREATE OR REPLACE FUNCTION remove_follow_up_messages_by_follow_up_id()
RETURNS TRIGGER AS $$
BEGIN
  DELETE FROM follow_up_messages WHERE follow_up_id = OLD.id;
  RETURN OLD;
END;
$$ LANGUAGE plpgsql;

-- Function: remove_follow_up_message_documents_by_follow_up_id()
CREATE OR REPLACE FUNCTION remove_follow_up_message_documents_by_follow_up_id()
RETURNS TRIGGER AS $$
BEGIN
  DELETE FROM follow_up_message_documents WHERE follow_up_message_id = OLD.id;
  RETURN OLD;
END;
$$ LANGUAGE plpgsql;

-- Trigger: after_document_delete
CREATE TRIGGER after_document_delete
AFTER DELETE ON documents
FOR EACH ROW
EXECUTE FUNCTION remove_knowledge_by_agent_id();

-- Trigger: after_follow_up_delete
CREATE TRIGGER after_follow_up_delete
AFTER DELETE ON follow_ups
FOR EACH ROW
EXECUTE FUNCTION remove_follow_up_messages_by_follow_up_id();

-- Trigger: after_follow_up_messages_delete
CREATE TRIGGER after_follow_up_messages_delete
AFTER DELETE ON follow_up_messages
FOR EACH ROW
EXECUTE FUNCTION remove_follow_up_message_documents_by_follow_up_id();

-- Function: update_password_secure
CREATE OR REPLACE FUNCTION update_password_secure(
    "current_plain_password" TEXT,
    "new_plain_password" TEXT,
    "current_id" UUID
)
RETURNS TEXT
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    encpass auth.users.encrypted_password%TYPE;
BEGIN
    SELECT encrypted_password
    INTO encpass
    FROM auth.users
    WHERE
        id = current_id AND encrypted_password = crypt(current_plain_password, auth.users.encrypted_password);

    IF NOT FOUND THEN
        RETURN 'incorrect_password';
    ELSE
        UPDATE auth.users
        SET encrypted_password = crypt(new_plain_password, gen_salt('bf'))
        WHERE id = current_id;
        RETURN 'success';
    END IF;
END;
$$;